// Flex setup
$enable-flex: true;

// Breakpoint setup
$grid-breakpoints: (
	// Extra small screen / phone
	xs: 320px,
	// Small screen / phone
	sm: 481px,
	// Medium screen / tablet
	md: 783px,
	// Large screen / desktop
	lg: 992px,
	// Extra large screen / wide desktop
	xl: 1024px,
	// Super extra screen
	xxl: 1367px
)
!default;


// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: $min) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: $max) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($name, $breakpoints) {
		@include media-breakpoint-down($name, $breakpoints) {
			@content;
		}
	}
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($lower, $breakpoints) {
		@include media-breakpoint-down($upper, $breakpoints) {
			@content;
		}
	}
}

@mixin itsfor($point) {
	@if $point == laptop {
		@media (min-width: 1024px) and (max-width: 1366px) {
			@content;
		}
	} @else
	if $point == imac {
		@media (min-device-width: 1200px) and (max-device-width: 1600px) and (-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi) {
			@content;
		}
	} @else
	if $point == desktop {
		@media (min-width: 1367px) {
			@content;
		}
	} @else
	if $point == tablet {
		@media (min-width: 783px) and (max-width: 1024px) {
			@content;
		}
	} @else
	if $point == ipad {
		@media (min-device-width: 768px) and (max-device-width: 1024px) and (-webkit-min-device-pixel-ratio: 2) {
			@content;
		}
	} @else
	if $point == ipadPro {
		@media (min-device-width: 834px) and (max-device-width: 1112px) and (-webkit-min-device-pixel-ratio: 2) {
			@content;
		}
	} @else
	if $point == tabletland {
		@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
			@content;
		}
	} @else
	if $point == tabletunder {
		@media (max-width: 1023px) {
			@content;
		}
	} @else
	if $point == phablet {
		@media (min-width: 481px) and (max-width: 783px) {
			@content;
		}
	} @else
	if $point == phone {
		@media (min-width: 481px) and (max-width: 783px) {
			@content;
		}
	} @else
	if $point == tabletized {
		@media (min-width: 481px) and (max-width: 783px) {
			@content;
		}
	} @else
	if $point == smallPhone {
		@media (min-width: 320px) and (max-width: 480px) {
			@content;
		}
	} @else
	if $point == samsung {
		@media (device-width: 320px) and (device-height: 640px)  {
			@content;
		}
	} @else
	if $point == iphoneX {
		// Iphone X includes also : Iphone 6+, 7+, 8+
		@media (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) {
			@content;
			}
		} @else
	if $point == iphone678 {
		@media (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-min-device-pixel-ratio: 2) {
			@content;
		}
		} @else
	if $point == iphone5 {
		@media (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
			@content;
		}
	} @else {
		@media (max-width: $point) {
			@content;
		}
	}
}

@mixin iphone_x( $orientation: null ) {
	@media only screen
	and (device-width: 375px)
	and (device-height: 812px)
	and (-webkit-device-pixel-ratio: 3)
	and (orientation: $orientation) {
		@content;
	}
}



@mixin min-width($size) {
	@media only screen and (min-width: $size) { @content; }
}
@mixin max-width($size) {
	@media only screen and (max-width: $size) { @content; }
}

$phone-width: 514px;
$tablet-width: 768px;
$desktop-width: 1024px;

@mixin phone {
  @media (min-width: #{$phone-width}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$tablet-width}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$tablet-width + 1px}) {
    @content;
  }
}
